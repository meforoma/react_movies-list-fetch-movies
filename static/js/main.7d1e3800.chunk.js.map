{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api/api.ts","components/FoundMovies/FoundMovies.tsx","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movies","movie","propAddMovie","useState","isListed","setIsListed","className","src","Poster","alt","type","classNames","onClick","map","each","imdbID","includes","Title","Plot","MoviesList","props","BASE_URL","apiKey","FoundMovies","FindMovie","input","setInput","setMovies","isLoading","setIsLoading","isError","setIsError","onSubmit","event","preventDefault","id","placeholder","value","onChange","currentTarget","searchQuery","fetch","then","result","ok","Error","status","statusText","json","Response","movieFound","Search","App","some","ReactDOM","render","document","getElementById"],"mappings":"gVAWaA,EAA6B,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aAC1D,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAiBA,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACEC,IAAKN,EAAMO,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UAEE,qBAAKA,UAAU,UAAf,SACE,wBACEI,KAAK,SACLJ,UAAWK,IACT,SAAU,aACV,CAAE,YAAaP,IAEjBQ,QA7BO,WACXX,GACEC,GACFA,EAAaD,GAPjBI,EAAYL,EAAOa,KAAI,SAAAC,GAAI,OAAIA,EAAKC,UACjCC,SAASf,EAAMc,UA0BZ,+BAYF,sBAAKT,UAAU,QAAf,UAEE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAKV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAb,SACGL,EAAMgB,aAMb,sBAAKX,UAAU,UAAf,UACGL,EAAMiB,KACP,iCCnEGC,EAA8B,SAACC,GAC1C,IAAQpB,EAAWoB,EAAXpB,OAER,OACE,qBAAKM,UAAU,SAAf,SACGN,EAAOa,KAAI,SAAAZ,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,EACPD,OAAQA,GAFHC,EAAMc,cCffM,EAAW,mCACXC,EAAS,WCMFC,G,MAA+B,SAAC,GAAD,IAAGvB,EAAH,EAAGA,OAAQE,EAAX,EAAWA,aAAX,OAC1C,aAD0E,CAC1E,qBACGF,EAAOa,KAAI,SAACZ,GAAD,OACV,qBAAwBK,UAAU,iBAAlC,SACE,cAAC,EAAD,CACEN,OAAQA,EACRC,MAAOA,EACPC,aAAcA,KAJRD,EAAMc,eCCTS,EAA6B,SAAC,GAAsB,IAApBtB,EAAmB,EAAnBA,aAC3C,EAA0BC,mBAAS,IAAnC,mBAAOsB,EAAP,KAAcC,EAAd,KACA,EAA4BvB,mBAAyB,MAArD,mBAAOH,EAAP,KAAe2B,EAAf,KACA,EAAkCxB,oBAAS,GAA3C,mBAAOyB,EAAP,KAAkBC,EAAlB,KACA,EAA8B1B,oBAAS,GAAvC,mBAAO2B,EAAP,KAAgBC,EAAhB,KA8BA,OACE,qCACE,uBACEzB,UAAU,aACV0B,SAAU,SAACC,GACTA,EAAMC,kBAHV,UAME,sBAAK5B,UAAU,QAAf,UACE,qBAAKA,UAAU,QAAf,yBAIA,qBAAKA,UAAU,UAAf,SACE,uBACEI,KAAK,OACLyB,GAAG,cACHC,YAAY,0BACZ9B,UAAWK,IAAW,QAAS,CAC7B,YAAamB,IAEfO,MAAOZ,EACPa,SAlDQ,SAACL,GACnBF,GAAW,GACXL,EAASO,EAAMM,cAAcF,YAoDtBP,GACC,mBAAGxB,UAAU,iBAAb,qDAMJ,qBAAKA,UAAU,mBAAf,SACE,qBAAKA,UAAU,UAAf,SACE,wBACEI,KAAK,SACLJ,UAAU,kBACVM,QAjDQ,WFpBI,IAAC4B,EEqBvBX,GAAa,GACbH,EAAS,KFtBcc,EEuBZf,EFtBNgB,MAAM,GAAD,OAAIpB,GAAJ,OAAeC,EAAf,cAA2BkB,IACpCE,MAAK,SAAAC,GACJ,IAAKA,EAAOC,GACV,MAAM,IAAIC,MAAJ,UAAaF,EAAOG,OAApB,YAA8BH,EAAOI,aAG7C,OAAOJ,EAAOK,WEiBbN,MAAK,SAAAC,GAAM,MACU,UAApBA,EAAOM,UATXpB,GAAa,QACbE,GAAW,IATM,SAACY,GAClBhB,EAAUgB,GACVd,GAAa,GACbH,EAAS,IACTK,GAAW,GAeHmB,CAAWP,EAAOQ,YAuClB,iCAWN,sBAAK7C,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,0BACasB,EAAY,cAAgB,MAExC5B,GACC,cAAC,EAAD,CACEA,OAAQA,EACRE,aAAcA,WC7FbkD,EAAgB,WAC3B,MAA4BjD,mBAAkB,IAA9C,mBAAOH,EAAP,KAAe2B,EAAf,KAQA,OACE,sBAAKrB,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYN,OAAQA,MAEtB,qBAAKM,UAAU,UAAf,SACE,cAAC,EAAD,CAAWJ,aAZA,SAACD,GACXD,EAAOqD,MAAK,qBAAGtC,SAAwBd,EAAMc,WAChDY,EAAU,CAAC1B,GAAF,mBAAYD,cCN3BsD,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.7d1e3800.chunk.js","sourcesContent":["/* eslint-disable react/require-default-props */\nimport classNames from 'classnames';\nimport React, { useState } from 'react';\nimport './MovieCard.scss';\n\ntype Props = {\n  movies: Movie[],\n  movie: Movie,\n  propAddMovie?: (movie: Movie) => void,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movies, movie, propAddMovie }) => {\n  const [isListed, setIsListed] = useState(false);\n\n  const checkListed = () => {\n    setIsListed(movies.map(each => each.imdbID)\n      .includes(movie.imdbID));\n  };\n\n  const addMovie = () => {\n    if (movie) {\n      if (propAddMovie) {\n        propAddMovie(movie);\n      }\n    }\n\n    checkListed();\n  };\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            src={movie.Poster}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n\n        <div className=\"control\">\n          <button\n            type=\"button\"\n            className={classNames(\n              'button', 'is-primary',\n              { 'is-hidden': isListed },\n            )}\n            onClick={addMovie}\n          >\n            Add to the list\n          </button>\n        </div>\n\n        <div className=\"media\">\n\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n\n          <div className=\"media-content\">\n            <p className=\"title is-4\">\n              {movie.Title}\n            </p>\n          </div>\n\n        </div>\n\n        <div className=\"content\">\n          {movie.Plot}\n          <br />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = (props) => {\n  const { movies } = props;\n\n  return (\n    <div className=\"movies\">\n      {movies.map(movie => (\n        <MovieCard\n          key={movie.imdbID}\n          movie={movie}\n          movies={movies}\n        />\n      ))}\n    </div>\n  );\n};\n","const BASE_URL = 'https://www.omdbapi.com/?apikey=';\nconst apiKey = 'e7eaf18f';\n\nexport const request = (searchQuery: string) => {\n  return fetch(`${BASE_URL}${apiKey}&t=${searchQuery}`)\n    .then(result => {\n      if (!result.ok) {\n        throw new Error(`${result.status}-${result.statusText}`);\n      }\n\n      return result.json();\n    });\n};\n\nexport const requestArr = (searchQuery: string) => {\n  return fetch(`${BASE_URL}${apiKey}&s=${searchQuery}`)\n    .then(result => {\n      if (!result.ok) {\n        throw new Error(`${result.status}-${result.statusText}`);\n      }\n\n      return result.json();\n    });\n};\n","import { MovieCard } from '../MovieCard';\n\ntype Props = {\n  movies: Movie[],\n  propAddMovie: (movie: Movie) => void,\n};\n\nexport const FoundMovies: React.FC<Props> = ({ movies, propAddMovie }) => ( // , propAddMovie\n  <>\n    {movies.map((movie: Movie) => (\n      <div key={movie.imdbID} className=\"card-container\">\n        <MovieCard\n          movies={movies}\n          movie={movie}\n          propAddMovie={propAddMovie}\n        />\n      </div>\n    ))}\n  </>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\nimport { requestArr } from '../../api/api';\nimport './FindMovie.scss';\nimport { FoundMovies } from '../FoundMovies/FoundMovies';\n\ntype Props = {\n  propAddMovie: (movie: Movie) => void,\n};\n\nexport const FindMovie: React.FC<Props> = ({ propAddMovie }) => {\n  const [input, setInput] = useState('');\n  const [movies, setMovies] = useState<Movie[] | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const handleInput = (event: React.FormEvent<HTMLInputElement>) => {\n    setIsError(false);\n    setInput(event.currentTarget.value);\n  };\n\n  const movieFound = (result: Movie[]) => {\n    setMovies(result);\n    setIsLoading(false);\n    setInput('');\n    setIsError(false);\n  };\n\n  const responseError = () => {\n    setIsLoading(false);\n    setIsError(true);\n  };\n\n  const searchMovie = () => {\n    setIsLoading(true);\n    setInput('');\n    requestArr(input)\n      .then(result => (\n        result.Response === 'False'\n          ? responseError()\n          : movieFound(result.Search)\n      ));\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={(event) => {\n          event.preventDefault();\n        }}\n      >\n        <div className=\"field\">\n          <div className=\"label\">\n            Movie title\n          </div>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', {\n                'is-danger': isError,\n              })}\n              value={input}\n              onChange={handleInput}\n            />\n          </div>\n\n          {isError && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-light\"\n              onClick={searchMovie}\n            >\n              Find a movie\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">\n          {`Preview${isLoading ? ' ...Loading' : ''}`}\n        </h2>\n        {movies && (\n          <FoundMovies\n            movies={movies}\n            propAddMovie={propAddMovie}\n          />\n        )}\n      </div>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovie = (movie: Movie): void => {\n    if (!movies.some(({ imdbID }) => imdbID === movie.imdbID)) {\n      setMovies([movie, ...movies]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie propAddMovie={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}